package client.view;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JTextField;
import client.controller.ClientChatThread;
import client.controller.UserInformationValidator;
import javax.swing.JButton;
import java.awt.Font;

/**
 * ClientLogin is a class generated by WindowBuilder plugins.
 * It is the login view for a user to connect to the server.
 * @author QQZhao
 *
 */
public class ClientLogin {

	public JFrame frame;
	public JTextField textField;
	public JTextField textField_1;
	public JTextField textField_2;
	
	public JFrame getFrame() {
		return frame;
	}

	public ClientLogin() {
		initialize();
	}
	
	/**
	 * initialize the GUI.
	 */	
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 450, 300);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.getContentPane().setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBounds(6, 6, 444, 272);
		frame.getContentPane().add(panel);
		panel.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Chat Room Login");
		lblNewLabel.setFont(new Font("Lucida Grande", Font.PLAIN, 20));
		lblNewLabel.setBounds(142, 18, 175, 35);
		panel.add(lblNewLabel);
		
		JLabel lblUserName = new JLabel("User Name:");
		lblUserName.setBounds(65, 83, 83, 16);
		panel.add(lblUserName);
		
		textField = new JTextField();
		textField.setBounds(160, 78, 130, 26);
		panel.add(textField);
		textField.setColumns(10);
		
		JLabel lblServerAddress = new JLabel("Server Address:");
		lblServerAddress.setBounds(38, 111, 97, 16);
		panel.add(lblServerAddress);
		
		JLabel lblPort = new JLabel("Port:");
		lblPort.setBounds(108, 139, 40, 16);
		panel.add(lblPort);
		
		textField_1 = new JTextField();
		textField_1.setColumns(10);
		textField_1.setBounds(160, 106, 130, 26);
		textField_1.setText("localhost");
		panel.add(textField_1);
		
		textField_2 = new JTextField();
		textField_2.setColumns(10);
		textField_2.setBounds(160, 134, 130, 26);
		textField_2.setText("16086");
		panel.add(textField_2);
		
		JButton btnNewButton = new JButton("Enter");
		btnNewButton.setBounds(160, 184, 117, 29);
		panel.add(btnNewButton);
		btnNewButton.addActionListener(new ActionListener() {			
			@Override
			public void actionPerformed(ActionEvent e) {
				ClientLogin.this.validateUserInput();
				String userName = ClientLogin.this.textField.getText();
				String serverAddress = ClientLogin.this.textField_1.getText();
				int port = Integer.valueOf(ClientLogin.this.textField_2.getText());
				new ClientChatThread(ClientLogin.this, userName, serverAddress, port);
			}
		});		
	}
	
	public void validateUserInput(){
		UserInformationValidator loginValidator = new UserInformationValidator(ClientLogin.this.textField.getText(), 
																				ClientLogin.this.textField_1.getText(), 
																				ClientLogin.this.textField_2.getText());
				if(!loginValidator.isUserNameInputNotEmpty()){
					JOptionPane.showMessageDialog(frame, "user name can not be empty", "", JOptionPane.WARNING_MESSAGE);
					return;
				}
				if(!loginValidator.isServerInfoInputNotEmpty()){
					JOptionPane.showMessageDialog(frame, "server information can not be empty", "", JOptionPane.WARNING_MESSAGE);
					return;
				}
				if(!loginValidator.isServerPortInputValid()){
					JOptionPane.showMessageDialog(frame, "server port must be between 1024 - 65535", "", JOptionPane.WARNING_MESSAGE);
					return;
				}
	}
	
	/**
	 * {@link #showConnectionPortFailed()} identify the failure of connection problem. It could be server is down or port information is invalid.
	 */
	public void showConnectionPortFailed(){
		JOptionPane.showMessageDialog(frame, "Server Not Started or Invalid Port", "Connection Failed", JOptionPane.WARNING_MESSAGE);
		return;
	}
	
	/**
	 * {@link #showConnectionServerAddressFailed()} identify that the server address is invalid.
	 */
	public void showConnectionServerAddressFailed(){
		JOptionPane.showMessageDialog(frame, "Invalid Server Address", "Connection Failed", JOptionPane.WARNING_MESSAGE);
		return;
	}
	
	/**
	 * {@link #showUserNameAlreadyExists()} identify username already exists based on the response message from login validation from server.
	 */
	public void showUserNameAlreadyExists(){
		JOptionPane.showMessageDialog(frame, "User Name Already Exists, Pick Another One", "Login Failed", JOptionPane.WARNING_MESSAGE);
		return;
	}
	
	/**
	 * {@link #showUnexpectedFaiture()} means all other failures not specified.
	 */
	public void showUnexpectedFaiture(){
		JOptionPane.showMessageDialog(frame, "Unexpected Failure", "Login Failed", JOptionPane.WARNING_MESSAGE);
		return;
	}
}
