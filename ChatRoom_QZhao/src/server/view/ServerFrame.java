package server.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import server.controller.ServerConnectThread;
import server.model.ServerContainer;
import utils.message.MessageParser;
import utils.message.XmlElementName;
import utils.message.XmlElementValue;
import utils.validator.PortValidator;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import java.awt.Color;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.awt.Font;

/**
 * ServerFrame is a class generated by WindowBuilder plugins.
 * It contains the frame of server view.
 * @author QQZhao
 *
 */
public class ServerFrame {	
	private ServerContainer server;
	private JFrame frame;
	public JTextField textField;
	private JTextArea userListArea;
	private JTextArea serverLogTextArea;
	public JButton btnNewButton;
	private JLabel lblFlag;
	private ServerConnectThread serverConnectThread;
	private JLabel totalUserNumlbl;

	public ServerFrame() {
		initialize();
	}

	/**
	 * {@link #initialize()}} start the GUI of server.
	 */
	private void initialize() {		
		frame = new JFrame();
		frame.setBounds(100, 100, 400, 400);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		frame.setVisible(true);
		frame.setAlwaysOnTop(true);
		frame.setResizable(false);
		frame.addWindowListener(new WindowAdapter() {			
			public void windowClosing(WindowEvent event){				
				if (ServerFrame.this.server != null){					
					String serverShutDownMessage = MessageParser.buildMessage(XmlElementName.TYPE, XmlElementValue.SERVER_SHUTDOWN);
					ServerContainer.getServerInstance().sendEveryUserMessage(serverShutDownMessage);					
					System.out.println("---server shutdown---");
				}
			}
		});
		
		/* server control panel*/
		JPanel serverControlPanel = new JPanel();
		serverControlPanel.setBounds(5, 5, 389, 65);
		frame.getContentPane().add(serverControlPanel);
		serverControlPanel.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Port: (1024 - 65535)");
		lblNewLabel.setBounds(18, 11, 132, 16);
		serverControlPanel.add(lblNewLabel);
		
		textField = new JTextField();
		textField.setText("16086");
		textField.setBounds(153, 6, 99, 26);
		textField.setColumns(10);
		serverControlPanel.add(textField);
				
		btnNewButton = new JButton("Start Server");
		btnNewButton.setBounds(263, 6, 109, 29);
		serverControlPanel.add(btnNewButton);
		btnNewButton.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				ServerFrame.this.server = ServerContainer.getServerInstance();				
				String portInput = ServerFrame.this.textField.getText();
				if(!(PortValidator.isValidPort(portInput))){
					JOptionPane.showMessageDialog(frame, "Invalid Port Number or Port Number is occupied.", "Invalid Port Number", JOptionPane.WARNING_MESSAGE);
					return;
				}
				serverConnectThread = new ServerConnectThread(ServerFrame.this, Integer.parseInt(portInput));
				serverConnectThread.start();
				ServerFrame.this.updateStartServerView();
				ServerFrame.this.updateServerLogTextArea("---server started---");
				System.out.println("---server started---");
			}
		});
				
		JLabel lblServerStatus = new JLabel("Server Status: ");
		lblServerStatus.setBounds(18, 42, 89, 16);
		serverControlPanel.add(lblServerStatus);		
		lblFlag = new JLabel("Off");
		lblFlag.setForeground(Color.RED);
		lblFlag.setBounds(119, 42, 61, 16);
		serverControlPanel.add(lblFlag);
		
		JLabel staticTotalUserNumlbl = new JLabel("Total Users:");
		staticTotalUserNumlbl.setBounds(205, 42, 89, 16);
		serverControlPanel.add(staticTotalUserNumlbl);		
		totalUserNumlbl = new JLabel("0");
		totalUserNumlbl.setBounds(295, 42, 61, 16);
		serverControlPanel.add(totalUserNumlbl);

		/*client list panel*/
		JPanel clientListPanel = new JPanel();
		clientListPanel.setBounds(5, 75, 190, 300);
		frame.getContentPane().add(clientListPanel);
		clientListPanel.setLayout(null);
		clientListPanel.setBorder(BorderFactory.createLineBorder(Color.gray));
		
		JLabel userListLabel = new JLabel("Users List:");
		userListLabel.setBounds(6, 6, 75, 16);
		clientListPanel.add(userListLabel);
		
		JScrollPane scrollPanel = new JScrollPane();
		scrollPanel.setBounds(6, 25, 175, 270);
		clientListPanel.add(scrollPanel);
		
		userListArea = new JTextArea();
		userListArea.setEditable(false);
		userListArea.setColumns(10);
		userListArea.setRows(10);
		scrollPanel.setViewportView(userListArea);	
		
		/*server log panel*/
		JPanel serverLogPanel = new JPanel();
		serverLogPanel.setBounds(194, 75, 200, 300);
		frame.getContentPane().add(serverLogPanel);
		serverLogPanel.setLayout(null);
		serverLogPanel.setBorder(BorderFactory.createLineBorder(Color.gray));
		
		JLabel serverLogLabel = new JLabel("Server Logs:");
		serverLogLabel.setBounds(6, 6, 81, 16);
		serverLogPanel.add(serverLogLabel);
		
		JScrollPane scrollPanel2 = new JScrollPane();
		scrollPanel2.setBounds(6, 25, 180, 270);
		serverLogPanel.add(scrollPanel2);
		
		serverLogTextArea = new JTextArea();
		serverLogTextArea.setEditable(false);
		serverLogTextArea.setColumns(10);
		serverLogTextArea.setRows(10);
		scrollPanel2.setViewportView(serverLogTextArea);
		
		JButton btnClear = new JButton("clear");
		btnClear.setFont(new Font("Lucida Grande", Font.PLAIN, 11));
		btnClear.setBounds(124, 6, 62, 17);
		serverLogPanel.add(btnClear);
		btnClear.addActionListener(new ActionListener() {			
			@Override
			public void actionPerformed(ActionEvent e) {
				ServerFrame.this.serverLogTextArea.setText("");
				
			}
		});
	}
	
	private void updateStartServerView(){
		this.textField.setEditable(false);
		this.textField.setEnabled(false);
		this.btnNewButton.setEnabled(false);
		this.lblFlag.setText("ON");
		this.lblFlag.setForeground(Color.GREEN);
	}
	
	public void updateUserListView(String printableUserNameList, int totalNum){
		this.totalUserNumlbl.setText(String.valueOf(totalNum));
		this.userListArea.setText(printableUserNameList);
	}
	
	public void showServerStartFailure(){
		JOptionPane.showMessageDialog(frame, "Invalid Port Number or Server Already Started.\nClick OK to exit.", "Warning", JOptionPane.WARNING_MESSAGE);
		return;
	}
	
	public void updateServerLogTextArea(String newLog){
		this.serverLogTextArea.append(newLog);
		this.serverLogTextArea.append("\n");
	}
		
	public JTextArea getServerLogTextArea() {
		return serverLogTextArea;
	}

	public ServerContainer getServer() {
		return server;
	}
	
	public JFrame getFrame() {
		return frame;
	}
}
